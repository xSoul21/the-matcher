Scopo della libreria
Lo scopo è quello di fornire una libreria che in input accetti due json ed in output torni una lista di differenze.
Il confronto deve avvenire in base ad alcune configurazioni ( personalizzazioni ) passate alla libreria.

Possibili configurazioni :
 -  gestire il confronto tra array in base al loro significato :
        - confrontarli in base alla loro posizione ( chiave uguale ad  indice) index
        - confrontarli in base al contenuto dell'elemento dell'array ( chiave uguale all'intero oggetto/primitivo) whole
        - confrontarli in base ad un insieme di chiavi ricavabili dall'elemento dell'array ( chiave uguale a campi singoli ) ( sempre che l'elemento dell'array sia un oggetto o un array ) custom keys
        - confrontarli in base a dei parametri custom
- gestire la possibilità di decidere di come confrontare gli elementi dell'array al primo livello :
       - possibilità di utilizzare/ignorare degli indici specifici ( blacklist/whitelist)
       - possibilità di poter filtrare gli elementi in base al contenuto ( ad es. filtrare tutti gli elementi con oggetti che hanno un certo campo ) whitelist/blacklist
       - possibilità di filtrare l'array con elementi decisi in maniera personalizzata ( tramite JSONPath)
- gestire la possibilità di controllare se il confronto deve fermarsi ad un certo numero di differenze o una certa differenza.

 - Avere la possibilità di decidere su quali oggetti andare a confrontare (es. confrontare solo un certo array o solo certi oggetti ).whitelist
 - Avere la possibilità di escludere oggetti su cui fare il confronto  -blacklist

[ {n:mario,c:rossi,p:[{x:0,y:0},1,true]},1,2,true,"ciccio"] ["ciccio",true,1,2,{n:mario,c:rossi},"parola"]




[ {n:mario,c:rossi},1,2,true,"ciccio"] ["ciccio",true,1,2,{n:mario,c:rossi},"parola"]
 1) filtro prendi solo oggetti numeri e bool
 [ {n:mario,c:rossi},1,2,true] [true,1,2,{n:mario,c:rossi}]
 2) confrontali con algo 2

[ {n:mario,c:rossi},1,2,true,"ciccio"] ["ciccio",true,1,2,{n:mario,c:rossi},"parola"]
1) diff
2) uguale
3) [mario,
{ name:"mario",
  mio:[1,true,{prop:"2"}],
  cognome:"Uncino"
}
Caso Oggetti
L'ordinamento delle proprietà degli oggetti JSON non viene considerato ai fini delle differenze

{nome:"Mario",cognome:"Rossi"}
{cognome:"Rossi",nome:"Mario"}
0 diff



[,"ciao",true,null,1,{},[]]


Possibile oggetto di configurazione :
config:
  - label: nomeRegola
    path: #/a
      regexp: #Sono in OR l'una con l'altra. Quindi la regola vale per questo path se il path matcha la prima regex oppure la seconda.
        - firstRegexp
        - secondRegexp
      jsonPath: #Incapsuliamo il valore della elemento nell'oggetto {"path": "/a","value": valoreElemento}. Se mi restituisce un oggetto vuoto => NoMatch altrimenti => Match
        - "$[?(!(@ == \"parola\"))]"
        - secondJSONPath

    ifArray: #I filtri sugli array prendono in input l'array e vogliono un array di posizioni che sono quelle degli elementi su cui iteriamo
      algorithmForCorrespondence: whole
      filters:
        - "$[?(!(@ == \"ciccio\"))]"
        - "$[?(!(@ == \"parola\"))]"
    ifObject: #I filtri sugli oggetti prendono in input l'oggetto e vogliono un array di field che sono quelli su cui iteriamo
      filterOnKey: "^(parola)$"
      filters:
        - "$[?(!(@ == \"ciccio\"))]" #Da capire come fare
    ifPrimitive: #I filtri sulle primitive prendono in input la primitiva e ci danno in output la primitiva se è da elaborare o niente se non è da elaborare
      ifString:
        exclude: true
        filterWithRegex: "^contenutoX.*$"
        filters: #Facciamo finta che sia un oggetto: incapsuliamo il valore della primitiva nell'oggetto {"primitive": valorePrimitiva}
          - "$.primitive == 'true'" #Da capire come fare

      ifBoolean: #Esclusivi
        exclude: true
        excludeIfValueIs: false

      ifNumber:
        exclude: true
        filterWithRegex: "^contenutoX.*$"
        filters: #Facciamo finta che sia un oggetto: incapsuliamo il valore della primitiva nell'oggetto {"primitive": valorePrimitiva}
          - "$.primitive == 'true'" #Da capire come fare

      ifNull:
        exclude: true

      exclude: true
      filterWithRegex: "^contenutoX.*$"
      filters: #Facciamo finta che sia un oggetto: incapsuliamo il valore della primitiva nell'oggetto {"primitive": valorePrimitiva}
        - "$.primitive == 'true'" #Da capire come fare